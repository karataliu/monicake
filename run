#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use Getopt::Std;
use util qw(installFile installPackageSuite runCmd runSteps :logging);

our $VERSION    = 0.1.4;

{   # Parse options.
    my %opts;
    exit(1) unless getopts('vnq', \%opts);
    $util::verbose  = $opts{'v'} ? 1 : ($opts{'q'} ? 3 : 2 );
    $util::dryrun   = $opts{'n'};
}

my $optType     = shift || "help";

sub HELP_MESSAGE    { say "$0 [-nvq] <server|agent> ";  exit 0;}

my $zabbixDb        = "zabbixdb";
my $zabbixUser      = "zabbix";
my $zabbixPassword  = "pabbix";

my $confServerApachePhp = << 'EOM';
Alias /zab /usr/share/zabbix
php_value max_execution_time 300
php_value memory_limit 128M
php_value post_max_size 16M
php_value upload_max_filesize 2M
php_value max_input_time 300
php_value date.timezone Asia/Shanghai
EOM

my $confServerPhp = << "EOM";
<?php
global \$DB;

\$DB['TYPE']     = 'MYSQL';
\$DB['SERVER']   = 'localhost';
\$DB['PORT']     = '0';
\$DB['DATABASE'] = '$zabbixDb';
\$DB['USER']     = '$zabbixUser';
\$DB['PASSWORD'] = '$zabbixPassword';

\$ZBX_SERVER      = 'localhost';
\$ZBX_SERVER_PORT = '10051';
\$ZBX_SERVER_NAME = '';
\$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
?>
EOM

my $dbSetup = << "EOM";
create database if not exists $zabbixDb character set utf8 collate utf8_bin;
grant all privileges on $zabbixDb.* to $zabbixUser\@localhost identified by '$zabbixPassword';
EOM

my $autoRegSetup = <<'EOM';
INSERT INTO \`actions\` VALUES (7,'autoreg1',2,0,0,0,'Auto registration: {HOST.HOST}','Host name: {HOST.HOST}\r\nHost IP: {HOST.IP}\r\nAgent port: {HOST.PORT}',0,'','');
INSERT INTO \`operations\` VALUES (7,7,6,0,1,1,0);
INSERT INTO \`optemplate\` VALUES (2,7,10001);
EOM

my $confServer = << "EOM";
DBHost=localhost
DBName=$zabbixDb
DBUser=$zabbixUser
DBPassword=$zabbixPassword
EOM

my $confDefault = << 'EOM';
START=yes
CONFIG_FILE="/etc/zabbix/zabbix_server.conf"
EOM

my $zabbixServerIp = shift || "192.168.0.4";
my $confAgent = << "EOM";
PidFile=/var/run/zabbix/zabbix_agentd.pid
Server=$zabbixServerIp
ServerActive=$zabbixServerIp
EOM

my %flow = (
    agent   => [
        {
            name    => "install Zabbix Agent package.",
            run     => sub {
                installPackageSuite("zabbix-agent");
            },
        },
        {
            name    => "Config zabbix agent.",
            run     => sub { installFile('/etc/zabbix/zabbix_agentd.conf', $confAgent); },
        },
        {
            name    => "Restart Zabbix Agent service.",
            run     => sub { runCmd('service zabbix-agent restart');},
        },
    ],
    server  => [
        {
            name    => "install Zabbix Server package.",
            run     => sub {
                installPackageSuite("zabbix-server");
            },
        },
        {
            name    => "configure apache.",
            run     => sub {
                installFile('/etc/apache2/conf-available/zabbix.conf', $confServerApachePhp)
                || runCmd("a2enconf zabbix");
            },
        },
        {
            name    => "Configure initial db.",
            run     => sub {
                runCmd("mysql <<EOF\n$dbSetup\nEOF")
                || runCmd("zcat /usr/share/zabbix-server-mysql/schema.sql.gz "
                            ."/usr/share/zabbix-server-mysql/images.sql.gz "
                            ."/usr/share/zabbix-server-mysql/data.sql.gz ".
                            "|mysql -u$zabbixUser -p$zabbixPassword $zabbixDb")
                || installFile('/etc/zabbix/zabbix.conf.php', $confServerPhp)
                || installFile('/etc/zabbix/zabbix_server.conf', $confServer)
                || installFile('/etc/default/zabbix-server', $confDefault);
            },
        },
        {
            name    => "Configure autoreg.",
            run     => sub {
                runCmd("mysql -u$zabbixUser -p$zabbixPassword $zabbixDb <<EOF\n$autoRegSetup\nEOF");
            },
        },
        {
            name    => "restart service.",
            run     => sub {
                runCmd("service apache2 restart")
                || runCmd("service zabbix-server restart");
            }
        },
    ],
);

my $steps = $flow{$optType};
if (!$steps){
    &HELP_MESSAGE;
    exit(1);
}

runSteps($steps);
