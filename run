#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use util qw(installFile installPackageSuite runCmd runSteps regSteps enableService :logging);

our $VERSION    = 0.1.6;

my %config      = (
    "client.serverIp"       => undef,
    "server.mysqlHost"      => undef,
    "server.mysqlDB"        => undef,
    "server.mysqlUser"      => undef,
    "server.mysqlPassword"  => undef,
);

{   # Parse options.
    Getopt::Long::Configure qw(gnu_getopt);
    my $optVerbose;
    my $optQuiet;
    my $optDryrun;
    my %optConfig;

    GetOptions(
        'verbose|v'     =>  \$optVerbose,
        'quiet|q'       =>  \$optQuiet,
        'dryrun|n'      =>  \$optDryrun,
        'config|c=s'    =>  \%optConfig,
    ) || exit(1);
    $util::verbose  = $optVerbose ? 1 : ($optQuiet ? 3 : 2 );
    $util::dryrun   = $optDryrun;

    # parse config
    while (my ($key,$value) = each %optConfig) {
        if(exists $config{$key}){
            $config{$key} = $value;
        }else{
            say "Invalid config key '$key' specified. Supported keys are:";
            say "client.serverIp";
            exit(5);
        }
    }
}

my $optType     = shift || "help";

my $zabbixDb        = "zabbixdb";
my $zabbixUser      = "zabbix";
my $zabbixPassword  = "pabbix";

my $confServerApachePhp = << 'EOM';
Alias /zab /usr/share/zabbix
php_value max_execution_time 300
php_value memory_limit 128M
php_value post_max_size 16M
php_value upload_max_filesize 2M
php_value max_input_time 300
php_value date.timezone Asia/Shanghai
EOM

my $confServerPhp = << "EOM";
<?php
global \$DB;

\$DB['TYPE']     = 'MYSQL';
\$DB['SERVER']   = 'localhost';
\$DB['PORT']     = '0';
\$DB['DATABASE'] = '$zabbixDb';
\$DB['USER']     = '$zabbixUser';
\$DB['PASSWORD'] = '$zabbixPassword';

\$ZBX_SERVER      = 'localhost';
\$ZBX_SERVER_PORT = '10051';
\$ZBX_SERVER_NAME = '';
\$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
?>
EOM

my $autoRegSetup = <<'EOM';
INSERT INTO \`actions\` VALUES (7,'autoreg1',2,0,0,0,'Auto registration: {HOST.HOST}','Host name: {HOST.HOST}\r\nHost IP: {HOST.IP}\r\nAgent port: {HOST.PORT}',0,'','');
INSERT INTO \`operations\` VALUES (7,7,6,0,1,1,0);
INSERT INTO \`optemplate\` VALUES (2,7,10105);
EOM

my $confServer = << "EOM";
DBHost=localhost
DBName=$zabbixDb
DBUser=$zabbixUser
DBPassword=$zabbixPassword
EOM

my $confDefault = << 'EOM';
START=yes
CONFIG_FILE="/etc/zabbix/zabbix_server.conf"
EOM


my %flow = (
    agent   => sub {
        unless (defined($config{'client.serverIp'})){
            say "client.serverIp not set";
            exit(5);
        }
        
        my $zabbixServerIp = $config{'client.serverIp'};
        my $confAgent = << "EOM";
PidFile=/var/run/zabbix/zabbix_agentd.pid
Server=$zabbixServerIp
ServerActive=$zabbixServerIp
UserParameter=azure.vm.agent.alive,ps aux |grep -c "[w]aagent -daemon"
EOM

        my $s1 = [];
        regSteps($s1, "Install Zabbix Agent package.", sub {
            installPackageSuite("zabbix-agent");
        });
        regSteps($s1, "Config zabbix agent.", sub {
            installFile('/etc/zabbix/zabbix_agentd.conf', $confAgent);
        });
        regSteps($s1, "Enable Zabbix Agent service.", sub {
            enableService('zabbix-agent');
        });
        regSteps($s1, "Restart Zabbix Agent service.", sub {
            runCmd('service zabbix-agent restart');
        });

        return $s1;
    },
    server  => sub {
        my $s1 = [];
        regSteps($s1, "Install Zabbix Server package.", sub{
            installPackageSuite("zabbix-server");
            installPackageSuite("perl-jsonrpc");    # for regTemplate
        });
        regSteps($s1, "Configure apache.", sub{
            installFile('/etc/apache2/conf-available/zabbix.conf', $confServerApachePhp)
            || runCmd("a2enconf zabbix");
        });
        regSteps($s1, "Configure initial db.", sub{
            my $dbSetup = << "EOM";
create database if not exists $zabbixDb character set utf8 collate utf8_bin;
grant all privileges on $zabbixDb.* to $zabbixUser\@localhost identified by '$zabbixPassword';
EOM

            runCmd("mysql -e \"$dbSetup\"")
            || runCmd("zcat /usr/share/zabbix-server-mysql/schema.sql.gz "
                        ."/usr/share/zabbix-server-mysql/images.sql.gz "
                        ."/usr/share/zabbix-server-mysql/data.sql.gz ".
                        "|mysql -u$zabbixUser -p$zabbixPassword $zabbixDb")
            || installFile('/etc/zabbix/zabbix.conf.php', $confServerPhp)
            || installFile('/etc/zabbix/zabbix_server.conf', $confServer)
            || installFile('/etc/default/zabbix-server', $confDefault);
        });
        regSteps($s1, "Restart service.", sub{
            runCmd("service apache2 restart")
            || runCmd("service zabbix-server restart");
        });
        regSteps($s1, "Configure azure specific tempalte.", sub{
            runCmd("perl regTemplate");
        });
        regSteps($s1, "Configure autoreg.", sub{
            runCmd("mysql -u$zabbixUser -p$zabbixPassword $zabbixDb <<EOF\n$autoRegSetup\nEOF");
        });

        return $s1;
    }
);

my $getSteps = $flow{$optType};
pod2usage(1) unless $getSteps;
runSteps(&$getSteps);

__END__
=head1 NAME

run - Install server/agent for monitoring

=head1 SYNOPSIS

run [-nqv] <server|agent> [-c configKey=configValue]

=head1 DESCRIPTION

B<This program> will help install monitorin agents.

=head1 OPTIONS

=over 4

=item B<-n>

Dry run.

=item B<-q>

Show less information.

=item B<-v>

Be more verbose.

=item B<-c>

Key configruation.

=back

=cut
