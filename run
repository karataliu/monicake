#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use Getopt::Std;

use constant {
    LOGDEBUG  => 1,
    LOGINFO   => 2,
    LOGWARN   => 3
};

our $VERSION    = 0.1.1;
my $optVerbose;
my $optDryrun;

{   # Parse options.
    my %opts;
    exit(1) unless getopts('vnq', \%opts);
    $optVerbose  = $opts{'v'} ? 1 : ($opts{'q'} ? 3 : 2 );
    $optDryrun   = $opts{'n'};
}

my $optType     = shift || "help";

sub HELP_MESSAGE    { say "$0 [-nvq] <server|agent> ";  exit 0;}

sub info
{
    my $msg     = shift;
    my $level   = shift || LOGINFO;

    return if ($optVerbose > $level);
    say "[MONICAKE] $msg";
}

sub runCmd
{
    my $cmd = shift;
    if ($optVerbose >= LOGINFO && $cmd !~ /<<EOF/) { $cmd .= " >/dev/null"; }

    info "Run command:\n$cmd", LOGDEBUG;
    return 0 if $optDryrun;

    my $ret = system($cmd);
    if ($ret){
        info "Return code is $ret", LOGDEBUG;
    }

    return $ret;
}

sub installFile
{
    my $path        = shift;
    my $content     = shift;

    $content =~ s/\$/\\\$/g if $content=~/\$/;
    runCmd("cat >$path <<EOF\n$content\nEOF");
}

sub installPackage
{
    my $packageLine = join(" ", @_);
    my $cmd         = "DEBIAN_FRONTEND=noninteractive apt-get -y install $packageLine";

    info "Begin install packages:$packageLine", LOGDEBUG;

    my $ret = runCmd($cmd);
    if (!$ret){
        info("Install succeed.", LOGDEBUG);
    }else{
        info("Install failed.", LOGDEBUG);
    }

    return $ret;
}

my $zabbixDb        = "zabbixdb";
my $zabbixUser      = "zabbix";
my $zabbixPassword  = "pabbix";

my $confServerApachePhp = << 'EOM';
php_value max_execution_time 300
php_value memory_limit 128M
php_value post_max_size 16M
php_value upload_max_filesize 2M
php_value max_input_time 300
php_value date.timezone Asia/Shanghai
EOM

my $confServerPhp = << "EOM";
<?php
global \$DB;

\$DB['TYPE']     = 'MYSQL';
\$DB['SERVER']   = 'localhost';
\$DB['PORT']     = '0';
\$DB['DATABASE'] = '$zabbixDb';
\$DB['USER']     = '$zabbixUser';
\$DB['PASSWORD'] = '$zabbixPassword';

\$ZBX_SERVER      = 'localhost';
\$ZBX_SERVER_PORT = '10051';
\$ZBX_SERVER_NAME = '';
\$IMAGE_FORMAT_DEFAULT = IMAGE_FORMAT_PNG;
?>
EOM

my $dbSetup = << "EOM";
create database if not exists $zabbixDb character set utf8 collate utf8_bin;
grant all privileges on $zabbixDb.* to $zabbixUser\@localhost identified by '$zabbixPassword';
EOM

my $confServer = << "EOM";
DBHost=localhost
DBName=$zabbixDb
DBUser=$zabbixUser
DBPassword=$zabbixPassword
EOM

my $confDefault = << 'EOM';
START=yes
CONFIG_FILE="/etc/zabbix/zabbix_server.conf"
EOM

my $zabbixServerIp = shift || "192.168.0.4";
my $confAgent = << "EOM";
Server=$zabbixServerIp
ServerActive=$zabbixServerIp
#Hostname=Zabbivm1
Include=/etc/zabbix/zabbix_agentd.conf.d/
EOM

my %flow = (
    agent   => [
        {
            name    => "install Zabbix Agent package.",
            run     => sub {
                installPackage("zabbix-agent");
            },
        },
        {
            name    => "Config zabbix agent.",
            run     => sub { installFile('/etc/zabbix/zabbix_agentd.conf', $confAgent); },
        },
        {
            name    => "Restart Zabbix Agent service.",
            run     => sub { runCmd('service zabbix-agent restart');},
        },
    ],
    server  => [
        {
            name    => "install Zabbix Server package.",
            run     => sub {
                installPackage("zabbix-server-mysql zabbix-frontend-php php5-mysql");
            },
        },
        {
            name    => "configure apache.",
            run     => sub {
                runCmd("echo 'Alias /z /usr/share/zabbix' > /etc/apache2/sites-available/zabbix.conf")
                || runCmd("a2ensite zabbix")
                || runCmd("echo '$confServerApachePhp' > /etc/apache2/conf-available/php-zabbix.conf")
                || runCmd("a2enconf php-zabbix");
            },
        },
        {
            name    => "configure db.",
            run     => sub {
                runCmd("mysql <<EOF\n$dbSetup\nEOF")
                || runCmd("zcat /usr/share/zabbix-server-mysql/schema.sql.gz |mysql -u$zabbixUser -p$zabbixPassword $zabbixDb")
                || runCmd("zcat /usr/share/zabbix-server-mysql/images.sql.gz |mysql -u$zabbixUser -p$zabbixPassword $zabbixDb")
                || runCmd("zcat /usr/share/zabbix-server-mysql/data.sql.gz |mysql -u$zabbixUser -p$zabbixPassword $zabbixDb")
                || installFile('/etc/zabbix/zabbix.conf.php', $confServerPhp)
                || installFile('/etc/zabbix/zabbix_server.conf', $confServer)
                || installFile('/etc/default/zabbix-server', $confDefault);
            },
        },
        {
            name    => "restart service.",
            run     => sub {
                runCmd("service apache2 restart")
                || runCmd("service zabbix-server restart");
            }
        },
    ],
);

my $steps = $flow{$optType};
if (!$steps){
    &HELP_MESSAGE;
    exit(1);
}

my $len = @$steps;
my $index =0 ;
foreach my $step (@$steps){
    ++$index;
    info "($index/$len) $$step{name}";
    my $run = $$step{run};
    if ((my $ret = &$run)){
        info "failed with code: $ret";
        last;
    }
}

